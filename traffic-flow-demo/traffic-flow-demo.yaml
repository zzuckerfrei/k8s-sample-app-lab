---
# Frontend App (App1) Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: flash
  labels:
    app: frontend-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /usr/share/nginx/html
        - name: nginx-conf
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config
        configMap:
          name: frontend-html
      - name: nginx-conf
        configMap:
          name: nginx-conf

---
# Frontend ConfigMap with HTML content
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
  namespace: flash
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Traffic Flow Demo</title>
      <style>
        body { 
          font-family: Arial, sans-serif; 
          margin: 40px; 
          text-align: center;
        }
        h1 { color: #333; }
        button {
          background-color: #4CAF50;
          border: none;
          color: white;
          padding: 15px 32px;
          text-align: center;
          font-size: 16px;
          margin: 20px;
          cursor: pointer;
          border-radius: 8px;
        }
        #result {
          margin-top: 20px;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          min-height: 100px;
        }
        #autoResult {
          margin-top: 20px;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          min-height: 100px;
          background-color: #f9f9f9;
        }
        .status-indicator {
          display: inline-block;
          width: 12px;
          height: 12px;
          border-radius: 50%;
          margin-right: 8px;
        }
        .active {
          background-color: #4CAF50;
        }
        .inactive {
          background-color: #f44336;
        }
        .controls {
          margin: 20px;
        }
      </style>
    </head>
    <body>
      <h1>Traffic Flow Demo for Hubble</h1>
      
      <div class="controls">
        <p>
          <span class="status-indicator" id="autoStatus"></span>
          <span id="autoStatusText">자동 호출: 활성화 중...</span>
          <button id="toggleAuto">자동 호출 끄기</button>
        </p>
        <p>Click the button to manually initiate a request that will flow through multiple services and reach GitHub.</p>
        <button id="startFlow">Start Traffic Flow</button>
      </div>
      
      <h3>수동 요청 결과:</h3>
      <div id="result">Results will appear here...</div>
      
      <h3>자동 요청 결과:</h3>
      <div id="autoResult">Automatic request results will appear here...</div>

      <script>
        // 수동 트래픽 생성 함수
        function manualTrafficFlow() {
          document.getElementById('result').innerHTML = 'Sending request to middleware service...';
          
          fetch('/api/start-flow')
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok: ' + response.status);
              }
              return response.text();
            })
            .then(data => {
              document.getElementById('result').innerHTML = data;
            })
            .catch(error => {
              document.getElementById('result').innerHTML = 'Error: ' + error.message;
              console.error('Fetch error:', error);
            });
        }
        
        // 자동 트래픽 생성 함수
        function autoTrafficFlow() {
          document.getElementById('autoResult').innerHTML = 'Sending automatic request to middleware service...';
          
          fetch('/api/start-flow')
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok: ' + response.status);
              }
              return response.text();
            })
            .then(data => {
              const now = new Date().toLocaleTimeString();
              document.getElementById('autoResult').innerHTML = `[${now}] ${data}`;
            })
            .catch(error => {
              const now = new Date().toLocaleTimeString();
              document.getElementById('autoResult').innerHTML = `[${now}] Error: ${error.message}`;
              console.error('Auto fetch error:', error);
            });
        }

        // 수동 버튼 이벤트 리스너
        document.getElementById('startFlow').addEventListener('click', manualTrafficFlow);
        
        // 자동 호출 상태 관리
        let autoCallEnabled = true;
        let autoCallInterval;
        
        // 자동 호출 토글 함수
        function toggleAutoCall() {
          autoCallEnabled = !autoCallEnabled;
          
          if (autoCallEnabled) {
            // 자동 호출 시작
            startAutoCall();
            document.getElementById('toggleAuto').textContent = '자동 호출 끄기';
            document.getElementById('autoStatusText').textContent = '자동 호출: 활성화 중...';
            document.getElementById('autoStatus').classList.remove('inactive');
            document.getElementById('autoStatus').classList.add('active');
          } else {
            // 자동 호출 중지
            clearInterval(autoCallInterval);
            document.getElementById('toggleAuto').textContent = '자동 호출 켜기';
            document.getElementById('autoStatusText').textContent = '자동 호출: 비활성화';
            document.getElementById('autoStatus').classList.remove('active');
            document.getElementById('autoStatus').classList.add('inactive');
          }
        }
        
        // 자동 호출 시작 함수
        function startAutoCall() {
          // 즉시 한 번 호출
          autoTrafficFlow();
          
          // 3초마다 호출 설정
          autoCallInterval = setInterval(autoTrafficFlow, 3000);
        }
        
        // 토글 버튼 이벤트 리스너
        document.getElementById('toggleAuto').addEventListener('click', toggleAutoCall);
        
        // 페이지 로드시 자동 호출 시작
        document.addEventListener('DOMContentLoaded', function() {
          document.getElementById('autoStatus').classList.add('active');
          startAutoCall();
        });
      </script>
    </body>
    </html>

---
# Frontend Service (LoadBalancer type)
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: flash
  labels:
    app: frontend-app
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: frontend-app

---
# Nginx Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: flash
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        # Proxy /api requests to middleware service
        location /api/start-flow {
            proxy_pass http://middleware-service:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }

---
# Namespace 선언
apiVersion: v1
kind: Namespace
metadata:
  name: flash

---
# Middleware App (App2) Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: middleware-app
  namespace: flash
  labels:
    app: middleware-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: middleware-app
  template:
    metadata:
      labels:
        app: middleware-app
    spec:
      containers:
      - name: middleware
        image: python:3.9-alpine
        ports:
        - containerPort: 8080
        command: ["/bin/sh", "-c"]
        args:
        - |
          pip install flask requests && \
          cat > /app.py << 'EOF'
          from flask import Flask, jsonify, request
          import requests
          import time
          import sys
          
          app = Flask(__name__)
          
          @app.route('/', methods=['GET'])
          def handle_request():
              print("Middleware received request", file=sys.stderr)
              print(f"Request headers: {dict(request.headers)}", file=sys.stderr)
              
              try:
                  # Call the backend service
                  backend_url = "http://backend-service:9000/"
                  print(f"Calling backend at {backend_url}", file=sys.stderr)
                  response = requests.get(backend_url, timeout=10)
                  return f"Middleware: Successfully called backend. Response: {response.text}"
              except Exception as e:
                  print(f"Error: {str(e)}", file=sys.stderr)
                  return f"Middleware: Error calling backend: {str(e)}"

          if __name__ == '__main__':
              print("Starting middleware server...", file=sys.stderr)
              app.run(host='0.0.0.0', port=8080)
          EOF
          python /app.py

---
# Middleware Service
apiVersion: v1
kind: Service
metadata:
  name: middleware-service
  namespace: flash
  labels:
    app: middleware-app
spec:
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: middleware-app

---
# Backend App (App3) Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-app
  namespace: flash
  labels:
    app: backend-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-app
  template:
    metadata:
      labels:
        app: backend-app
    spec:
      containers:
      - name: backend
        image: python:3.9-alpine
        ports:
        - containerPort: 9000
        command: ["/bin/sh", "-c"]
        args:
        - |
          pip install flask requests && \
          cat > /app.py << 'EOF'
          from flask import Flask, jsonify, request
          import requests
          import time
          import sys
          
          app = Flask(__name__)
          
          @app.route('/', methods=['GET'])
          def handle_request():
              print("Backend received request", file=sys.stderr)
              print(f"Request headers: {dict(request.headers)}", file=sys.stderr)
              
              try:
                  # Call GitHub
                  github_url = "https://github.com"
                  print(f"Calling external service at {github_url}", file=sys.stderr)
                  response = requests.get(github_url, timeout=10)
                  return f"Backend: Successfully called GitHub. Status code: {response.status_code}"
              except Exception as e:
                  print(f"Error: {str(e)}", file=sys.stderr)
                  return f"Backend: Error calling GitHub: {str(e)}"
          
          if __name__ == '__main__':
              print("Starting backend server...", file=sys.stderr)
              app.run(host='0.0.0.0', port=9000)
          EOF
          python /app.py

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: flash
  labels:
    app: backend-app
spec:
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: http
  selector:
    app: backend-app
